# -*- coding: utf-8 -*-
"""object_localization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11CEoPO-9nY90OkHEegEk3y05weUaDwKU
"""

from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.patches as patches
from glob import glob
import imageio

shape=(100,100,3)
batch_size=32

vgg=keras.applications.vgg16.VGG16(include_top=False,input_shape=shape)

flatten_layer=keras.layers.Flatten()
dense_layer=keras.layers.Dense(4,activation="sigmoid")

x=flatten_layer(vgg.output)
x=dense_layer(x)
model=keras.Model(vgg.input,x)

model.compile(optimizer="adam",loss=keras.losses.binary_crossentropy,metrics=["accuracy"])

def generator():
  while True:
    for _ in range(50):
      x=np.zeros((batch_size,shape[0],shape[1],shape[2]))
      y=np.zeros((batch_size,4))
      for i in range(batch_size):
        row0=np.random.randint(0,shape[0]-10)
        col0=np.random.randint(0,shape[1]-10)
        row1=np.random.randint(shape[0]-10,shape[0])
        col1=np.random.randint(shape[1]-10,shape[1])
        x[i,row0:row1,col0:col1,:]=1
        y[i,0]=row0/100
        y[i,1]=col0/100
        y[i,2]=(row1-row0)/100
        y[i,3]=(col1-col0)/100
      yield x,y

model.fit_generator(generator(),epochs=20,steps_per_epoch=50)

def plot_white_boxes_location():

  x=np.zeros(shape)
  row0=np.random.randint(0,shape[0]-10)
  col0=np.random.randint(0,shape[1]-10)
  row1=np.random.randint(shape[0]-10,shape[0])
  col1=np.random.randint(shape[1]-10,shape[1])
  x[row0:row1,col0:col1,:]=1
  predict_=model.predict(np.array([x]))
  predict_=predict_[0]
  predict_[0]=predict_[0]*shape[0]
  predict_[1]=predict_[1]*shape[1]
  predict_[2]=predict_[2]*shape[0]
  predict_[3]=predict_[3]*shape[1]
  fig, ax = plt.subplots(figsize=(10, 10))
  ax.imshow(x)
 
  rect = patches.Rectangle((predict_[1],predict_[0]),  predict_[3],predict_[2], linewidth=4, edgecolor='r')


  ax.add_patch(rect)

  plt.show()

plot_white_boxes_location()

image = keras.preprocessing.image.load_img("/content/pokemon.jpg", target_size=(28,28,3))
input_arr = keras.preprocessing.image.img_to_array(image)/255

def generatorV2():
  while True:
    for _ in range(50):
      x=np.zeros((batch_size,shape[0],shape[1],shape[2]))
      y=np.zeros((batch_size,4))
      for i in range(batch_size):
        row0=np.random.randint(0,shape[0]-input_arr.shape[0])
        col0=np.random.randint(0,shape[1]-input_arr.shape[1])
        row1=row0+input_arr.shape[0]
        col1=col0+input_arr.shape[1]
        x[i,row0:row1,col0:col1,:]=input_arr
        y[i,0]=row0/100
        y[i,1]=col0/100
        y[i,2]=(row1-row0)/100
        y[i,3]=(col1-col0)/100
      yield x,y

model.fit_generator(generatorV2(),epochs=20,steps_per_epoch=50)

def plot_white_boxes_locationV2():
  x=np.zeros(shape)
  row0=np.random.randint(0,shape[0]-input_arr.shape[0])
  col0=np.random.randint(0,shape[1]-input_arr.shape[1])
  row1=row0+input_arr.shape[0]
  col1=col0+input_arr.shape[1]
  x[row0:row1,col0:col1,:]=input_arr
  predict_=model.predict(np.array([x]))
  predict_=predict_[0]
  predict_[0]=predict_[0]*shape[0]
  predict_[1]=predict_[1]*shape[1]
  predict_[2]=predict_[2]*shape[0]
  predict_[3]=predict_[3]*shape[1]
  fig, ax = plt.subplots(figsize=(10, 10))
  ax.imshow(keras.preprocessing.image.array_to_img( x))
 
  rect = patches.Rectangle((predict_[1],predict_[0]),  predict_[3],predict_[2], linewidth=4, edgecolor='r',fill=False)


  ax.add_patch(rect)

  plt.show()

plot_white_boxes_locationV2()

def generatorV3():
  while True:
    for _ in range(50):
      x=np.zeros((batch_size,shape[0],shape[1],shape[2]))
      y=np.zeros((batch_size,4))
      scale=np.random.uniform(0.5,1.5)
      input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),3))
      for i in range(batch_size):
        row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
        col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
        row1=row0+input_arr_resized.shape[0]
        col1=col0+input_arr_resized.shape[1]
        x[i,row0:row1,col0:col1,:]=input_arr_resized
        y[i,0]=row0/100
        y[i,1]=col0/100
        y[i,2]=(row1-row0)/100
        y[i,3]=(col1-col0)/100
      yield x,y

model.fit_generator(generatorV3(),epochs=20,steps_per_epoch=50)

def plot_white_boxes_locationV3():
  x=np.zeros(shape)
  scale=np.random.uniform(0.5,1.5)
  input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),3))
  row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
  col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
  row1=row0+input_arr_resized.shape[0]
  col1=col0+input_arr_resized.shape[1]
  x[row0:row1,col0:col1,:]=input_arr_resized
  predict_=model.predict(np.array([x]))
  predict_=predict_[0]
  predict_[0]=predict_[0]*shape[0]
  predict_[1]=predict_[1]*shape[1]
  predict_[2]=predict_[2]*shape[0]
  predict_[3]=predict_[3]*shape[1]
  fig, ax = plt.subplots(figsize=(10, 10))
  ax.imshow(keras.preprocessing.image.array_to_img( x))
 
  rect = patches.Rectangle((predict_[1],predict_[0]),  predict_[3],predict_[2], linewidth=4, edgecolor='r',fill=False)


  ax.add_patch(rect)

  plt.show()

plot_white_boxes_locationV3()

def generatorV4():
  while True:
    for _ in range(50):
      x=np.zeros((batch_size,shape[0],shape[1],shape[2]))
      y=np.zeros((batch_size,4))
      scale=np.random.uniform(0.5,1.5)
      input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),3))
      to_flip=np.random.random()
      if to_flip <0.5:
        input_arr_resized=np.fliplr(input_arr_resized)
      for i in range(batch_size):
        row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
        col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
        row1=row0+input_arr_resized.shape[0]
        col1=col0+input_arr_resized.shape[1]
        x[i,row0:row1,col0:col1,:]=input_arr_resized
        y[i,0]=row0/100
        y[i,1]=col0/100
        y[i,2]=(row1-row0)/100
        y[i,3]=(col1-col0)/100
      yield x,y

model.fit_generator(generatorV4(),epochs=20,steps_per_epoch=50)

def plot_white_boxes_locationV4():
  x=np.zeros(shape)
  scale=np.random.uniform(0.5,1.5)
  input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),3))
  to_flip=np.random.random()
  if to_flip <0.5:
    input_arr_resized=np.fliplr(input_arr_resized)
  row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
  col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
  row1=row0+input_arr_resized.shape[0]
  col1=col0+input_arr_resized.shape[1]
  x[row0:row1,col0:col1,:]=input_arr_resized
  predict_=model.predict(np.array([x]))
  predict_=predict_[0]
  predict_[0]=predict_[0]*shape[0]
  predict_[1]=predict_[1]*shape[1]
  predict_[2]=predict_[2]*shape[0]
  predict_[3]=predict_[3]*shape[1]
  fig, ax = plt.subplots(figsize=(10, 10))
  ax.imshow(keras.preprocessing.image.array_to_img( x))
 
  rect = patches.Rectangle((predict_[1],predict_[0]),  predict_[3],predict_[2], linewidth=4, edgecolor='r',fill=False)


  ax.add_patch(rect)

  plt.show()

plot_white_boxes_locationV4()

backgrounds=[]
background_files=glob("/content/drive/MyDrive/background/background*.jpg")
for f in background_files:
  backgrounds.append(np.array(keras.preprocessing.image.load_img(f)))

from skimage.transform import rescale
# img=keras.preprocessing.image.load_img("/content/pokemon.png")
# input_arr=keras.preprocessing.image.img_to_array(img)
input_arr=imageio.imread("/content/pokemon.png")
print(input_arr.shape)
input_arr=rescale(input_arr,0.07,preserve_range=True,multichannel=True)

def generatorV5():
  while True:
    for _ in range(50):
      x=np.zeros((batch_size,shape[0],shape[1],shape[2]))
      y=np.zeros((batch_size,4))
    
      # scale=np.random.uniform(0.5,1.5)
      # input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),3))
      # to_flip=np.random.random()
      # if to_flip <0.5:
      #   input_arr_resized=np.fliplr(input_arr_resized)
      for i in range(batch_size):
        id=np.random.choice(len(backgrounds))
        bg=backgrounds[id]
        bg_h,bg_w,_=bg.shape
        rnd_h=np.random.randint(bg_h-shape[0])
        rnd_w=np.random.randint(bg_w-shape[1])
        
        x[i]=bg[rnd_h:rnd_h+shape[0],rnd_w:rnd_w+shape[1]].copy()

        scale=np.random.uniform(0.5,1.5)
        input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),4)
        ).astype(np.uint8)
        to_flip=np.random.random()
        if to_flip <0.5:
           input_arr_resized=np.fliplr(input_arr_resized)

        row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
        col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
        row1=row0+input_arr_resized.shape[0]
        col1=col0+input_arr_resized.shape[1]
        mask=(input_arr_resized[:,:,3]==0)

        bg_slice=x[i,row0:row1,col0:col1,:]
        bg_slice=np.expand_dims(mask,-1)*bg_slice
        bg_slice+=input_arr_resized[:,:,:3]
        x[i,row0:row1,col0:col1,:]=bg_slice
        y[i,0]=row0/100
        y[i,1]=col0/100
        y[i,2]=(row1-row0)/100
        y[i,3]=(col1-col0)/100
      yield x/255,y

model.fit_generator(generatorV5(),epochs=20,steps_per_epoch=50)

def plot_white_boxes_locationV5():
  x=np.zeros(shape)
  id=np.random.choice(len(backgrounds))
  bg=backgrounds[id].astype(np.uint8)
  bg_h,bg_w,_=bg.shape
  rnd_h=np.random.randint(bg_h-shape[0])
  rnd_w=np.random.randint(bg_w-shape[1])
        
  x=bg[rnd_h:rnd_h+shape[0],rnd_w:rnd_w+shape[1]].copy()
  scale=np.random.uniform(0.5,1.5)
  input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),4)).astype(np.uint8)
  to_flip=np.random.random()
  if to_flip <0.5:
    input_arr_resized=np.fliplr(input_arr_resized)
  row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
  col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
  row1=row0+input_arr_resized.shape[0]
  col1=col0+input_arr_resized.shape[1]
  mask=(input_arr_resized[:,:,3]==0)

  bg_slice=x[row0:row1,col0:col1,:]
  bg_slice=np.expand_dims(mask,-1)*bg_slice
  bg_slice+=input_arr_resized[:,:,:3]
  x[row0:row1,col0:col1,:]=bg_slice
 
  predict_=model.predict(np.array([x/255]))
  predict_=predict_[0]
  predict_[0]=predict_[0]*shape[0]
  predict_[1]=predict_[1]*shape[1]
  predict_[2]=predict_[2]*shape[0]
  predict_[3]=predict_[3]*shape[1]
  fig, ax = plt.subplots(figsize=(10, 10))
  ax.imshow(keras.preprocessing.image.array_to_img( x/255))
 
  rect = patches.Rectangle((predict_[1],predict_[0]),  predict_[3],predict_[2], linewidth=4, edgecolor='r',fill=False)


  ax.add_patch(rect)

  plt.show()

plot_white_boxes_locationV5()

def custom_loss(y_true,y_pred):
  bce=keras.losses.binary_crossentropy(y_true[:,:-1],y_pred[:,:-1])
  bce2=keras.losses.binary_crossentropy(y_true[:,-1],y_pred[:,-1])
  return 2*y_true[:,-1]*bce+0.5*bce2

flatten_layer2=keras.layers.Flatten()
dense_layer2=keras.layers.Dense(5,activation="sigmoid")

x=flatten_layer2(vgg.output)
x=dense_layer2(x)
model=keras.Model(vgg.input,x)

model.compile(optimizer="adam",loss=custom_loss,metrics=["accuracy"])

def generatorV6():
  while True:
    for _ in range(50):
      x=np.zeros((batch_size,shape[0],shape[1],shape[2]))
      y=np.zeros((batch_size,5))
    
      # scale=np.random.uniform(0.5,1.5)
      # input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),3))
      # to_flip=np.random.random()
      # if to_flip <0.5:
      #   input_arr_resized=np.fliplr(input_arr_resized)
      for i in range(batch_size):
        id=np.random.choice(len(backgrounds))
        bg=backgrounds[id]
        bg_h,bg_w,_=bg.shape
        rnd_h=np.random.randint(bg_h-shape[0])
        rnd_w=np.random.randint(bg_w-shape[1])
        
        x[i]=bg[rnd_h:rnd_h+shape[0],rnd_w:rnd_w+shape[1]].copy()
        have_obj=np.random.random()
        if have_obj <0.5:
          y[i,0]=0
          y[i,1]=0
          y[i,2]=0
          y[i,3]=0
          y[i,4]=0
        else:  
          scale=np.random.uniform(0.5,1.5)
          input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),4)
          ).astype(np.uint8)
          to_flip=np.random.random()
          if to_flip <0.5:
            input_arr_resized=np.fliplr(input_arr_resized)

          row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
          col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
          row1=row0+input_arr_resized.shape[0]
          col1=col0+input_arr_resized.shape[1]
          mask=(input_arr_resized[:,:,3]==0)

          bg_slice=x[i,row0:row1,col0:col1,:]
          bg_slice=np.expand_dims(mask,-1)*bg_slice
          bg_slice+=input_arr_resized[:,:,:3]
          x[i,row0:row1,col0:col1,:]=bg_slice
          y[i,0]=row0/100
          y[i,1]=col0/100
          y[i,2]=(row1-row0)/100
          y[i,3]=(col1-col0)/100
          y[i,4]=1
      yield x/255,y

model.fit_generator(generatorV6(),epochs=20,steps_per_epoch=50)

def plot_white_boxes_locationV6():
  x=np.zeros(shape)
  id=np.random.choice(len(backgrounds))
  bg=backgrounds[id].astype(np.uint8)
  bg_h,bg_w,_=bg.shape
  rnd_h=np.random.randint(bg_h-shape[0])
  rnd_w=np.random.randint(bg_w-shape[1])
        
  x=bg[rnd_h:rnd_h+shape[0],rnd_w:rnd_w+shape[1]].copy()
  have_obj=np.random.random()
  
  if have_obj>=0.5:  
    scale=np.random.uniform(0.5,1.5)
    input_arr_resized=np.resize(input_arr,(int(input_arr.shape[0]*scale),int(input_arr.shape[1]*scale),4)).astype(np.uint8)
    to_flip=np.random.random()
    if to_flip <0.5:
      input_arr_resized=np.fliplr(input_arr_resized)
    row0=np.random.randint(0,shape[0]-input_arr_resized.shape[0])
    col0=np.random.randint(0,shape[1]-input_arr_resized.shape[1])
    row1=row0+input_arr_resized.shape[0]
    col1=col0+input_arr_resized.shape[1]
    mask=(input_arr_resized[:,:,3]==0)

    bg_slice=x[row0:row1,col0:col1,:]
    bg_slice=np.expand_dims(mask,-1)*bg_slice
    bg_slice+=input_arr_resized[:,:,:3]
    x[row0:row1,col0:col1,:]=bg_slice
 
  predict_=model.predict(np.array([x/255]))
  predict_=predict_[0]
  predict_[0]=predict_[0]*shape[0]
  predict_[1]=predict_[1]*shape[1]
  predict_[2]=predict_[2]*shape[0]
  predict_[3]=predict_[3]*shape[1]
  fig, ax = plt.subplots(figsize=(10, 10))
  ax.imshow(keras.preprocessing.image.array_to_img( x/255))
  if predict_[4]>0.5:
    rect = patches.Rectangle((predict_[1],predict_[0]),  predict_[3],predict_[2], linewidth=4, edgecolor='r',fill=False)


    ax.add_patch(rect)

  plt.show()

plot_white_boxes_locationV6()

